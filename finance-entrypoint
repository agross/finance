#!/bin/sh
#
# (C) 2012-2018 Stefan Schallenberg
# 
# Execute automatic tasks for finance


#### DB Setup privileges #####################################################
function dbsetup_privileges () {
	printf "Granting privileges to %s.\n" "$MYSQL_USER"
	$MYSQL_ROOT_CMD <<-EOF
		GRANT all privileges
			ON $MYSQL_DATABASE.*
			TO '$MYSQL_USER'@'%'
			WITH GRANT OPTION;
		EOF
	if [ $? != "0" ] ; then
		printf "Error resetting privileges.\n"
		return 1
	fi
}

#### DB Setup Users ##########################################################
function dbsetup_users () {
	where_users=""
	for u in $DB_USERS ; do
		where_users="${where_users}, '$u'"
	done
	$MYSQL_ROOT_CMD -N --batch <<-EOF |
		SELECT user, host
			FROM mysql.user
			WHERE user NOT IN ('root', '$MYSQL_USER' $where_users ) AND
			 is_role="N";
		EOF
	while IFS=$'\t' read db_user db_host ; do
		printf "Deleting User %s @ %s\n" "$db_user" "$db_host"
		$MYSQL_ROOT_CMD <<-EOF
			DROP USER '$db_user'@'$db_host';
			EOF
		if [ $? != "0" ] ; then return  1 ; fi
	done
	if [ $? != "0" ] ; then return 1 ; fi

	$MYSQL_ROOT_CMD -N --batch <<-EOF |
		SELECT user
			FROM mysql.user
			WHERE is_role="Y";
		EOF
	while read db_user ; do
			printf "Deleting Role %s\n" "$db_user"
			$MYSQL_ROOT_CMD <<-EOF
				DROP ROLE '$db_user' ;
				EOF
			if [ $? != "0" ] ; then return  1 ; fi
	done
	if [ $? != "0" ] ; then return 1 ; fi
		
	printf "Creating Role fin_user.\n"
	$MYSQL_ROOT_CMD <<-EOF
		CREATE ROLE fin_user;
		EOF
	if [ $? != "0" ] ; then return  1 ; fi

	for u in $DB_USERS ; do
		eval p=\$DB_${u}_PASSWORD
		if [ -z "$p" ] ; then
			printf "Creating User %s without password\n" "$u"
			$MYSQL_ROOT_CMD <<-EOF
				CREATE USER IF NOT EXISTS '$u'@'%'
				EOF
			if [ $? != "0" ] ; then return  1 ; fi
		else
			printf "Creating User %s with password\n" "$u"
			$MYSQL_ROOT_CMD <<-EOF
				CREATE USER IF NOT EXISTS '$u'@'%' IDENTIFIED BY '$p';
				EOF
			if [ $? != "0" ] ; then return  1 ; fi
		fi
		$MYSQL_ROOT_CMD <<-EOF
			GRANT fin_user TO '$u'@'%';
			SET DEFAULT ROLE fin_user FOR '$u'@'%';
			EOF
		if [ $? != "0" ] ; then return 1 ; fi
	done
}

##### Main ###################################################################
aqb=/usr/bin/aqbanking-cli
fnt=/usr/local/bin/fntxt2sql
datadir=/finance

if [ -z "$MYSQL_HOST" ] ; then
	printf "Variable MYSQL_HOST needs to be set.\n"
	exit 1
elif [ -z "$MYSQL_DATABASE" ] ; then
	printf "Variable MYSQL_DATABASE needs to be set.\n"
	exit 1
elif [ -z "$MYSQL_USER" ] ; then
	printf "Variable MYSQL_USER needs to be set.\n"
	exit 1
elif [ -z "$MYSQL_PASSWORD" ] ; then
	printf "Variable MYSQL_PASSWORD needs to be set.\n"
	exit 1
elif [ ! -r $datadir/.hbci-pinfile ] ; then
	printf "%s/.hbci-pinfile must exist and be readable.\n" \
		"$datadir"
	exit 1
fi

MYSQL_CMD="mysql"
MYSQL_CMD="$MYSQL_CMD --host=$MYSQL_HOST"
MYSQL_CMD="$MYSQL_CMD --user=$MYSQL_USER"
MYSQL_CMD="$MYSQL_CMD --password=$MYSQL_PASSWORD"
MYSQL_CMD="$MYSQL_CMD $MYSQL_DATABASE"

if [ ! -z "$MYSQL_ROOT_PASSWORD" ] ; then
	printf "Got DBADM privilege because \$MYSQL_ROOT_PASSWORD is set.\n"

	MYSQL_ROOT_CMD="mysql"
	MYSQL_ROOT_CMD="$MYSQL_ROOT_CMD --host=$MYSQL_HOST"
	MYSQL_ROOT_CMD="$MYSQL_ROOT_CMD --user=root"
	MYSQL_ROOT_CMD="$MYSQL_ROOT_CMD --password=$MYSQL_ROOT_PASSWORD"
	MYSQL_ROOT_CMD="$MYSQL_ROOT_CMD	$MYSQL_DATABASE"
else
	printf "No DBADM privileges because \$MYSQL_ROOT_PASSWORD is not set.\ Will not check users.n"
	MYSQL_ROOT_CMD=""
fi

if [ ! -z "$MYSQL_ROOT_CMD" ] ; then
	dbsetup_privileges || exit 1
fi

if [ ! -z "$MYSQL_ROOT_CMD" ] && [ ! -z "$DB_USERS" ] ; then
	dbsetup_users || exit 1
fi

dbexist=$($MYSQL_CMD -N <<-EOF
	SELECT COUNT(*) 
		FROM information_schema.tables
		WHERE table_schema="$MYSQL_DATABASE" AND table_name="fn_entry";
		EOF
		)
if [ "$?" != "0" ] ; then 
	printf "Error connecting to datatabase %s on %s (User %s PW %s)\n" \
		"$MYSQL_HOST" "$MYSQL_HOST" "$MYSQL_USER" "$MYSQL_PASSWORD"
	exit 1
fi

if [ "$dbexist" == "0" ] ; then
	printf "database %s is empty, will create tables etc.\n" "$MYSQL_DATABASE"
	$fnt -cre -mysql \
		-mysql_host $MYSQL_HOST \
		-mysql_database $MYSQL_DATABASE \
		-mysql_user $MYSQL_USER \
		-mysql_password $MYSQL_PASSWORD
	if [ "$?" != "0" ] ; then
		printf "Error creating tables.\n"
		exit 1
	fi
else
	printf "using existing database %s.\n" "$MYSQL_DATABASE"
fi

test -d $datadir/inbound.aqb      || mkdir $datadir/inbound.aqb
test -d $datadir/inbound.aqb-tran || mkdir $datadir/inbound.aqb-tran
test -d $datadir/inbound.aqb-bal  || mkdir $datadir/inbound.aqb-bal
test -d $datadir/store.aqb        || mkdir $datadir/store.aqb

$aqb  -P $datadir/.hbci-pinfile -n request --balance --transactions \
    -c ~/inbound.aqb/`date +\%Y\%m\%d-\%H\%M\%S.\%N`

for f in $datadir/inbound.aqb/* ; do 
    fnam=$(basename $f)
    $aqb listtrans -c $f -o $datadir/inbound.aqb-tran/$fnam && \
    $aqb listbal   -c $f -o $datadir/inbound.aqb-bal/$fnam  && \
    mv $f $datadir/store.aqb 
    done

/usr/local/bin/finance -mysql

#/usr/local/bin/mail.sh

