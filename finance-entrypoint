#!/bin/sh
#
# (C) 2012-2018 Stefan Schallenberg
# 
# Execute automatic tasks for finance


##### trim ###################################################################
function trim {
	if [ $# -ne 1 ] ; then
		# Empty String results in empty string
		return
	fi

	# remove leading blanks
	local v="$1"
	v="${v#"${v%%[![:space:]]*}"}"
	v="${v%"${v##*[![:space:]]}"}"
	
	printf "%s\n" "$v"
	}

#### DB Setup privileges #####################################################
function dbsetup_privileges () {
	printf "Granting DB privileges to %s.\n" "$MYSQL_USER"
	$MYSQL_ROOT_CMD <<-EOF
		GRANT all privileges
			ON $MYSQL_DATABASE.*
			TO '$MYSQL_USER'@'%'
			WITH GRANT OPTION;
		EOF
	if [ $? != "0" ] ; then
		printf "Error granting DB privileges.\n"
		return 1
	fi
}

#### DB Setup Users ##########################################################
function dbsetup_users () {
	where_users=""
	for u in $DB_USERS ; do
		where_users="${where_users}, '$u'"
	done
	$MYSQL_ROOT_CMD -N --batch <<-EOF |
		SELECT user, host
			FROM mysql.user
			WHERE user NOT IN ('root', '$MYSQL_USER' $where_users ) AND
				is_role="N";
		EOF
	while IFS=$'\t' read db_user db_host ; do
		printf "Deleting DB User %s @ %s\n" "$db_user" "$db_host"
		$MYSQL_ROOT_CMD <<-EOF
			DROP USER '$db_user'@'$db_host';
			EOF
		if [ $? != "0" ] ; then return  1 ; fi
	done
	if [ $? != "0" ] ; then return 1 ; fi

	$MYSQL_ROOT_CMD -N --batch <<-EOF |
		SELECT user
			FROM mysql.user
			WHERE user NOT IN ('fin_user') AND
				is_role="Y";
		EOF
	while read db_user ; do
			printf "Deleting DB Role %s\n" "$db_user"
			$MYSQL_ROOT_CMD <<-EOF
				DROP ROLE '$db_user' ;
				EOF
			if [ $? != "0" ] ; then return  1 ; fi
	done
	if [ $? != "0" ] ; then return 1 ; fi
		
	printf "Creating DB Role fin_user.\n"
	$MYSQL_ROOT_CMD <<-EOF
		CREATE ROLE IF NOT EXISTS fin_user;
		EOF
	if [ $? != "0" ] ; then return  1 ; fi

	for u in $DB_USERS ; do
		eval p=\$DB_${u}_PASSWORD
		if [ -z "$p" ] ; then
			printf "Creating DB User %s without password\n" "$u"
			$MYSQL_ROOT_CMD <<-EOF
				CREATE USER IF NOT EXISTS '$u'@'%'
				EOF
			if [ $? != "0" ] ; then return  1 ; fi
		else
			printf "Creating DB User %s with password\n" "$u"
			$MYSQL_ROOT_CMD <<-EOF
				CREATE USER IF NOT EXISTS '$u'@'%' IDENTIFIED BY '$p';
				EOF
			if [ $? != "0" ] ; then return  1 ; fi
		fi
		$MYSQL_ROOT_CMD <<-EOF
			GRANT fin_user TO '$u'@'%';
			SET DEFAULT ROLE fin_user FOR '$u'@'%';
			EOF
		if [ $? != "0" ] ; then return 1 ; fi
	done
}

##### dbsetup_tables #########################################################
dbsetup_tables () {
	dbexist=$($MYSQL_CMD -N <<-EOF
	SELECT COUNT(*) 
		FROM information_schema.tables
		WHERE table_schema="$MYSQL_DATABASE" AND table_name="fn_entry";
		EOF
		)
	if [ "$?" != "0" ] ; then 
		printf "Error connecting to datatabase %s on %s (User %s PW %s)\n" \
			"$MYSQL_HOST" "$MYSQL_HOST" "$MYSQL_USER" "$MYSQL_PASSWORD"
		exit 1
	fi
	
	if [ "$dbexist" == "0" ] ; then
		printf "Database %s is empty, will create tables etc.\n" "$MYSQL_DATABASE"
		$fnt -cre -mysql \
			-mysql_host $MYSQL_HOST \
			-mysql_database $MYSQL_DATABASE \
			-mysql_user $MYSQL_USER \
			-mysql_password $MYSQL_PASSWORD
		if [ "$?" != "0" ] ; then
			printf "Error creating tables.\n"
			exit 1
		fi
	else
		printf "Reusing existing database %s.\n" "$MYSQL_DATABASE"
	fi

}

##### aqsetup ################################################################
function aqsetup () {
	local line pin u blz parm
	local account_nr=0
	local accounts_blz=( )
	local accounts_user=( )
	
	# Read .hbci-pinfile
	while read line ; do
		if [ "${#line}" == "0" ] ; then
			continue;	# ignore blank lines
		elif [ ${line:0:1} == "#" ] ; then 
			continue;	# ignore comment lines
		fi
		case $line in
			PIN_* )
				# HBCI with german BLZ and account number
#				pin=$(trim "${line#*=}")
#				pin=${pin%\"}
#				pin=${pin#\"}
				line=$(trim "${line%%=*}")
				line=${line##PIN_}
				u=${line#*_}
				blz=${line%_*}
				#DEBUG printf "DEBUG: PIN blz=%s u=%s\n" "$blz" "$u"

				accounts_blz[$account_nr]="$blz"
				accounts_user[$account_nr]="$u" 
				(( account_nr ++ ))
				;;
				
			SETUP_* )
				parm=$(trim "${line#*=}")
				parm=${parm%\"}
				parm=${parm#\"}
				line=$(trim "${line%%=*}")
				line=${line##SETUP_}
				u=${line#*_}
				blz=${line%_*}
				#DEBUG printf "DEBUG: SETUP blz=%s u=%s parm=\"%s\"\n" "$blz" "$u" "$parm"
				
				eval "SETUP_$blz_$u=\"\$parm\"" 
				;;
			* )
				printf "Warning: Ignoring unknown HBCI config Line %s in %s\n" \
					"$line" "$datadir/.hbci-pinfile"
				;;
		esac
	done <$datadir/.hbci-pinfile
	(( account_nr -- ))

	# read configuration of aqhbci
	users=$(aqhbci-tool4 \
		--noninteractive \
		listusers ) || return 1
	while read line ; do
		# line looks like
		# User 1: Bank: de/50010517 User Id: 1234567890 Customer Id: 12345678901234
		#DEBUG printf "DEBUG: Line \"%s\"\n" "$line"
		if [ -z "$line" ] ; then
			continue
		fi
		blz=${line##*Bank: }
		blz=${blz%% User Id:*}
		blz=${blz##de/}
		u=${line##*User Id: }
		u=${u%% Customer Id: *}
		#DEBUG printf "DEBUG: SETUP blz=%s u=%s\n" "$blz" "$u"
		eval "AQCONF_$blz_$u=1" 
	done <<<$users

	# Now configure each account in pinfile but not yet in aqhbci
	for i in $(seq 0  $account_nr) ; do 
		blz=${accounts_blz[$i]}
		u=${accounts_user[$i]}
		eval parm=\"\$SETUP_$blz_$u\"
		eval aqconf=\"\$AQCONF_$blz_$u\"
		if [ -z "$aqconf" ] ; then
			aqsetup_acc "$blz" "$u" "$parm" || return 1
		else
			printf "Reusing existing HBCI configuration for BLZ %s User %s\n" \
				"$blz" "$u"
		fi
	done			

	return 0
}

##### aqsetup_acc ############################################################
function aqsetup_acc () {
	local blz="$1"
	local u="$2"
	local parm="$3"

	printf "Configuring HBCI for BLZ %s User %s setup=\"%s\"\n" \
		"$blz" "$u" "$parm"
			
	aqhbci-tool4 \
		--noninteractive \
		adduser \
		-b $blz \
		-N $u \
		-u $u \
		-t pintan \
		$parm
	rc=$?; if [ "$rc" != 0 ] ; then
		printf "Error %s in aqhbci-tool4 adduser\n" "$rc"
		return 1
	fi

	aqhbci-tool4 \
		--noninteractive \
		--acceptvalidcerts \
		--pinfile=$datadir/.hbci-pinfile \
		getsysid \
		-b $blz
	rc=$? ; if [ "$rc" != 0 ] ; then
		printf "Error %s in aqhbci-tool4 getsysid. Proceeding anyway.\n" "$rc"
	fi

	aqhbci-tool4 \
		--noninteractive \
		--acceptvalidcerts \
		--pinfile=$datadir/.hbci-pinfile \
		getkeys \
		-b $blz
	rc=$? ; if [ "$rc" != 0 ] ; then
		printf "Error %s in aqhbci-tool4 getkeys. Proceeding anyway.\n" "$rc"
	fi

	aqhbci-tool4 \
		--noninteractive \
		--acceptvalidcerts \
		--pinfile=$datadir/.hbci-pinfile \
		getaccounts \
		-b $blz
	rc=$? ; if [ "$rc" != 0 ] ; then
		printf "Error %s in aqhbci-tool4 getaccounts. aqhbci-config dump follows.\n" "$rc"
		aqhbci-tool4 \
			listusers
		aqhbci-tool4 \
			listaccounts
		return 1
	fi

	return 0
}

##### Import ################################################################
function import () {
##### Initalise Logging ######################################################
loghead=`basename $0`
fntxt2sql=~/tools/fntxt2sql/fntxt2sql
echo >&2 "$loghead: Started at $(date) in $(pwd)"

##### Handle parms ###########################################################
if [ $1. == --rescan. ]; then
	echo >&2 "$loghead: Scanning all Files in Store"
	searchFor="store.*"
	moveTo=""
	shift
else
	echo >&2 "$loghead: Scanning inbound [use --rescan to scan all Files in store]"
	searchFor="inbound.*"	
	moveTo="store"
fi

parm=$*
echo >&2 "$loghead: Parameter \"$parm\""

##### Now do the search ######################################################
for f in `ls -d $searchFor 2>/dev/null`; do
	if [ -d $f ]; then
		echo >&2 "$loghead: processing directory $f"
		handleDir $f
	else
		echo >&2 "$loghead: Ignoring Non-Directory $f"
	fi
done

echo >&2 "$loghead: Ended at" `date`
return 0
}

##### Handle one inbound or store directory ##################################
function import_handleDir
{
# get type from Extension
ftype=${1##*.}

for f in `ls -d $1/* 2>/dev/null`; do
	case $ftype in 
		aqb-tran | aqb-bal | aqm | btx)
			if [ -f $f ]; then
				echo >&2 "$loghead: Processing file $f"
				$fntxt2sql $parm -$ftype -f $f
				rc=$?
			else
				echo >&2 "$loghead: Ignoring Directory $ftype $f"
				rc=-1
			fi
			;;
		# for HBCI only directories are allowed
		hbci )
			if [ -d $f ]; then
				echo >&2 "$loghead: Processing file $f"
				$fntxt2sql $parm -$ftype -f $f
				rc=$?
			else
				echo >&2 "$loghead: Ignoring Non-Directory $ftype $f"
				rc=-1
			fi
			;;
		manual )
		    echo >&2 "$loghead: Warning: Ignoring $ftype $f. Run manually!"
		    ;;
		*)
			echo >&2 "$loghead: Ignoring unknown type $ftype"
			rc=-1
			return
	esac
	
	if [ ! -z $moveTo ]; then
		if [ $rc. == 0. ]; then
			mv --backup=numbered $f $moveTo.$ftype/
		else
			echo >&2 "$loghead: Import of $f failed (RC=$rc)."
		fi 
	fi
done

}

##### Main ###################################################################
fnt=/usr/local/bin/fntxt2sql
datadir=/finance

if [ -z "$MYSQL_HOST" ] ; then
	printf "Variable MYSQL_HOST needs to be set.\n"
	exit 1
elif [ -z "$MYSQL_DATABASE" ] ; then
	printf "Variable MYSQL_DATABASE needs to be set.\n"
	exit 1
elif [ -z "$MYSQL_USER" ] ; then
	printf "Variable MYSQL_USER needs to be set.\n"
	exit 1
elif [ -z "$MYSQL_PASSWORD" ] ; then
	printf "Variable MYSQL_PASSWORD needs to be set.\n"
	exit 1
elif [ ! -r $datadir/.hbci-pinfile ] ; then
	printf "File %s/.hbci-pinfile must exist and be readable.\n" \
		"$datadir"
	exit 1
fi

MYSQL_CMD="mysql"
MYSQL_CMD="$MYSQL_CMD --host=$MYSQL_HOST"
MYSQL_CMD="$MYSQL_CMD --user=$MYSQL_USER"
MYSQL_CMD="$MYSQL_CMD --password=$MYSQL_PASSWORD"
MYSQL_CMD="$MYSQL_CMD $MYSQL_DATABASE"

if [ ! -z "$MYSQL_ROOT_PASSWORD" ] ; then
	printf "Got DBADM privilege because \$MYSQL_ROOT_PASSWORD is set.\n"

	MYSQL_ROOT_CMD="mysql"
	MYSQL_ROOT_CMD="$MYSQL_ROOT_CMD --host=$MYSQL_HOST"
	MYSQL_ROOT_CMD="$MYSQL_ROOT_CMD --user=root"
	MYSQL_ROOT_CMD="$MYSQL_ROOT_CMD --password=$MYSQL_ROOT_PASSWORD"
	MYSQL_ROOT_CMD="$MYSQL_ROOT_CMD	$MYSQL_DATABASE"
else
	printf "No DBADM privileges because \$MYSQL_ROOT_PASSWORD is not set.\ Will not check users.n"
	MYSQL_ROOT_CMD=""
fi

if [ ! -z "$MYSQL_ROOT_CMD" ] ; then
	dbsetup_privileges || exit 1
fi

if [ ! -z "$MYSQL_ROOT_CMD" ] && [ ! -z "$DB_USERS" ] ; then
	dbsetup_users || exit 1
fi

dbsetup_tables || exit 1

aqsetup || exit 1

test -d $datadir/inbound.aqb      || mkdir $datadir/inbound.aqb
test -d $datadir/inbound.aqb-tran || mkdir $datadir/inbound.aqb-tran
test -d $datadir/inbound.aqb-bal  || mkdir $datadir/inbound.aqb-bal
test -d $datadir/store.aqb        || mkdir $datadir/store.aqb

printf "Loading transactions and balances \n"
aqbanking-cli \
	--noninteractive \
	--acceptvalidcerts \
	--pinfile=$datadir/.hbci-pinfile \
	request \
	--balance \
	--transactions \
	-c $datadir/inbound.aqb/`date +\%Y\%m\%d-\%H\%M\%S.\%N`
rc=$? ; if [ "$rc" != 0 ] ; then
	printf "Error %s in aqbanking-cli request --balance --transactions\n" "$rc"
	exit 1
fi

printf "Processing transactions and balances \n"
for f in $datadir/inbound.aqb/* ; do 
    fnam=$(basename $f)
    aqbanking-cli listtrans -c $f -o $datadir/inbound.aqb-tran/$fnam && \
    aqbanking-cli listbal   -c $f -o $datadir/inbound.aqb-bal/$fnam  && \
    mv $f $datadir/store.aqb 
    done

printf "Importing transactions and balances into database (disabled)\n"
#/usr/local/bin/finance -mysql

printf "Sending alert EMail (disabled)\n"
#/usr/local/bin/mail.sh

exit 0